# -*- coding: utf-8 -*-
"""Welcome To Colab

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/intro.ipynb
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix
from imblearn.over_sampling import SMOTE

# Load the dataset
data = pd.read_csv('smote.csv')  # Replace with your actual file path

# Split into features and target
X = data.drop('Admit', axis=1)
y = data['Admit']

# Split into training and test sets
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

# Train a classifier on original training data (before SMOTE)
clf_original = RandomForestClassifier(random_state=42)
clf_original.fit(X_train, y_train)

# Predict and evaluate before SMOTE
y_pred_original = clf_original.predict(X_test)
print("Classification Report (Before SMOTE):\n", classification_report(y_test, y_pred_original))

# Apply SMOTE to balance the dataset
smote = SMOTE(random_state=42)
X_train_resampled, y_train_resampled = smote.fit_resample(X_train, y_train)

# Train a classifier on resampled training data (after SMOTE)
clf_resampled = RandomForestClassifier(random_state=42)
clf_resampled.fit(X_train_resampled, y_train_resampled)

# Predict and evaluate after SMOTE
y_pred_resampled = clf_resampled.predict(X_test)
print("\nClassification Report (After SMOTE):\n", classification_report(y_test, y_pred_resampled))

# üîç Simple Custom Prediction with Probability (for resampled model)
sample = pd.DataFrame([[660, 3.67, 3]], columns=["GRE", "GPA", "RANK"])  # Use a DataFrame with column names
proba = clf_resampled.predict_proba(sample)[0]
prediction = clf_resampled.predict(sample)[0]

# Output custom prediction and probabilities
print(f"\nCustom Prediction: {'Admitted (1)' if prediction else 'Not Admitted (0)'}")
print(f"Probability of Admission: {proba[1]:.2f}")
print(f"Probability of Not Admission: {proba[0]:.2f}")